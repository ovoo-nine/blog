import{_ as i,v as l,b as a,R as e}from"./chunks/framework.1d4697e5.js";const u=JSON.parse('{"title":"Diff 算法","description":"","frontmatter":{},"headers":[],"relativePath":"analysis/vue-2/dom/diff.md","filePath":"analysis/vue-2/dom/diff.md","lastUpdated":1711008698000}'),t={name:"analysis/vue-2/dom/diff.md"},o=e('<h1 id="diff-算法" tabindex="-1">Diff 算法 <a class="header-anchor" href="#diff-算法" aria-label="Permalink to &quot;Diff 算法&quot;">​</a></h1><ol><li>同层比较，首先是判断节点是否是相同节点,通过节点类型和 key 值比较，相同则进行更新，不同直接删除替换</li><li>如果都是文本节点，直接替换文本。新旧分别为元素节点和文本节点，则执行对应的删除和更新操作，如果都是元素节点，且都有 children 时，开始比较 children</li><li>使用双端 diff 更新 children <ol><li>两端相同则直接更新</li><li>旧开始 等于 新结束，则移动旧的开始节点到旧的结束节点</li><li>就结束等于新开始，则移动旧的结束到开始节点</li><li>都不相等，则从旧的节点中找到新开始的节点，有则更新和移动，无则创建新的 vnode,进行插入</li><li>遍历完成后，如果新节点还没遍历完，则将剩余节点添加到 DOM 中</li><li>如果旧节点还未遍完，则删除相关旧的节点</li></ol></li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ol><li>同层比较，同类型比较</li><li>找出移动的节点</li></ol>',4),s=[o];function d(f,r,n,c,h,_){return l(),a("div",null,s)}const p=i(t,[["render",d]]);export{u as __pageData,p as default};
